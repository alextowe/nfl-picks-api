from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout, update_session_auth_hash
from django.contrib.auth.views import LoginView
from django.views.generic.base import TemplateView
from django.contrib import messages
from .models import User
from .forms import RegisterForm, LoginForm, ChangePasswordForm

class LoginUser(LoginView):
    form_class = LoginForm
    template_name = 'base/index.html'
   
    def post(self, request):
        form = self.form_class(request.POST)
        print(formi.is_valid())
        if form.is_valid():
            user = authenticate(
                username=form.cleaned_data['username'],
                password=form.cleaned_data['password'],
            )
            if user is not None:
                login(request, user)
                return redirect('home')
        message = 'Login failed!'
        return render(request, self.template_name, context={'form': form, 'message': message})
class HomeView(TemplateView):
    template_name = 'base/home.html'


def logout_user(request):
    if request.method == "POST":
        logout(request)
        messages.success(request, 'You are now logged out.')
    return redirect('/')

def profile(request):
    context = {

    }
    return render(request, 'base/profile.html', context)

def settings(request):
    user = request.user
    if request.method == 'POST':
        old_password = request.POST['old_password']
        new_password1 = request.POST['new_password1']
        new_password2 = request.POST['new_password2']
        user = authenticate(email=request.user.email, password=old_password)
        if user is not None:
            change_password_form.clean_new_password2()
            change_password_form.save()
            messages.success(request, 'Your password was successfully updated!')
        else:
            messages.error(request, 'Please correct the error below.')
    
    change_password_form = ChangePasswordForm(request.user)
    context = {
        'change_password_form': change_password_form
    }
    return render(request, 'base/settings.html', context)

def delete_user(request, id):
    print(request.method)
    user = User.objects.get(id=id)
    user.delete()
    return redirect('/')
